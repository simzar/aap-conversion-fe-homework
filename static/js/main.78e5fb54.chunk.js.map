{"version":3,"sources":["components/Table/Table.jsx","components/DatePicker/DatePicker.jsx","components/Flag/Flag.jsx","containers/CampaignsList/CampaignsList.jsx","utils/apiService.js","state/users/usersApi.js","state/users/usersActions.js","state/users/usersModel.js","state/campaigns/campaignsModel.js","state/campaigns/campaignsActions.js","containers/CampaignsList/index.js","containers/App/App.jsx","serviceWorker.js","state/campaigns/campaignsReducer.js","state/users/usersReducer.js","state/reducers.js","state/store.js","index.jsx"],"names":["Table","columns","data","isLoading","isError","loadingText","noDataText","className","resolveData","filterable","sortable","resizable","defaultPageSize","pageSizeOptions","loading","showPagination","length","DatePickerComponent","disabled","minDate","placeholder","startDate","setDate","placeholderText","selected","onChange","date","isClearable","defaultProps","undefined","Flag","isActive","labelTrue","labelFalse","labelId","id","CampaignsList","props","addCampaigns","bind","mapCampaigns","constructColumns","selectStartDate","state","window","AddCampaigns","this","campaigns","loadCampaigns","fetchUsers","users","Object","entries","formatMessage","intl","currentDate","Date","now","map","campaign","userName","userId","endDate","Header","accessor","filterMethod","filter","rows","matchSorter","value","keys","filterAll","Filter","row","Cell","numeral","format","setState","Component","api","get","url","a","fetch","response","json","usersApi","fetchUsersSuccess","type","payload","campaignsSchema","object","number","required","name","string","budget","setCampaigns","mapDispatchToProps","dispatch","usersMap","reduce","result","validationPromises","validate","Promise","all","console","error","message","connect","injectIntl","cx","classnames","styles","App","translations","DEFAULT_TRANSLATIONS","locale","messages","Boolean","location","hostname","match","initialState","campaignsReducer","action","usersReducer","rootReducer","combineReducers","store","createStore","reducers","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.78e5fb54.chunk.js","sourcesContent":["import React from 'react';\nimport ReactTable from 'react-table';\nimport PropTypes from 'prop-types';\nimport './Table.scss';\n\nconst DEFAULT_PAGE_SIZE = 10;\n\nconst Table = ({\n  columns,\n  data,\n  isLoading,\n  isError,\n  loadingText,\n  noDataText,\n}) => (\n  <ReactTable\n    className=\"-striped -highlight\"\n    data={isError || data}\n    resolveData={data ? () => data : []}\n    columns={columns}\n    filterable\n    sortable={false}\n    resizable={false}\n    defaultPageSize={DEFAULT_PAGE_SIZE}\n    pageSizeOptions={[5, 10, 20, 50, 100]}\n    loading={isLoading || isError}\n    loadingText={loadingText}\n    noDataText={noDataText}\n    showPagination={data.length > DEFAULT_PAGE_SIZE}\n  />\n);\n\nTable.propTypes = {\n  // eslint-disable-next-line react/forbid-prop-types\n  columns: PropTypes.array.isRequired,\n  // eslint-disable-next-line react/forbid-prop-types\n  data: PropTypes.array.isRequired,\n  isLoading: PropTypes.bool.isRequired,\n  isError: PropTypes.bool.isRequired,\n  loadingText: PropTypes.string.isRequired,\n  noDataText: PropTypes.string.isRequired,\n};\n\nexport default Table;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport DatePicker from 'react-datepicker';\nimport './DatePicker.scss';\n\nconst DatePickerComponent = ({\n  disabled,\n  minDate,\n  placeholder,\n  startDate,\n  setDate,\n}) => (\n  <DatePicker\n    disabled={disabled}\n    minDate={minDate}\n    placeholderText={placeholder}\n    selected={startDate}\n    onChange={(date) => setDate(date)}\n    isClearable\n  />\n);\n\nDatePickerComponent.propTypes = {\n  disabled: PropTypes.bool,\n  minDate: PropTypes.instanceOf(Date),\n  placeholder: PropTypes.string.isRequired,\n  startDate: PropTypes.instanceOf(Date),\n  setDate: PropTypes.func.isRequired,\n};\n\nDatePickerComponent.defaultProps = {\n  disabled: false,\n  minDate: undefined,\n  startDate: undefined,\n};\n\nexport default DatePickerComponent;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { FormattedMessage } from 'react-intl';\nimport './Flag.scss';\n\nconst Flag = ({ isActive, labelTrue, labelFalse }) => {\n  const labelId = isActive ? labelTrue : labelFalse;\n  const className = isActive ? 'active' : 'inactive';\n\n  return (\n    <div className={`label label--${className}`}>\n      <FormattedMessage id={labelId} />\n    </div>\n  );\n};\n\nFlag.propTypes = {\n  isActive: PropTypes.bool.isRequired,\n  labelTrue: PropTypes.string.isRequired,\n  labelFalse: PropTypes.string.isRequired,\n};\n\nexport default Flag;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { IntlProvider } from 'react-intl';\nimport matchSorter from 'match-sorter';\nimport numeral from 'numeral';\nimport Table from '../../components/Table';\nimport DatePicker from '../../components/DatePicker';\nimport Flag from '../../components/Flag';\n\nclass CampaignsList extends Component {\n  constructor(props) {\n    super(props);\n\n    this.addCampaigns = this.addCampaigns.bind(this);\n    this.mapCampaigns = this.mapCampaigns.bind(this);\n    this.constructColumns = this.constructColumns.bind(this);\n    this.selectStartDate = this.selectStartDate.bind(this);\n\n    this.state = { startDate: null };\n  }\n\n  componentDidMount() {\n    window.AddCampaigns = this.addCampaigns;\n  }\n\n  componentWillUnmount() {\n    window.AddCampaigns = null;\n  }\n\n  addCampaigns(campaigns) {\n    const { loadCampaigns, fetchUsers, users } = this.props;\n\n    // eslint-disable-next-line no-unused-expressions\n    Object.entries(users).length > 0 || fetchUsers();\n    loadCampaigns(campaigns);\n  }\n\n  mapCampaigns() {\n    const {\n      campaigns,\n      users,\n      intl: { formatMessage },\n    } = this.props;\n    const currentDate = Date.now();\n\n    return campaigns.map((campaign) => ({\n      ...campaign,\n      userName:\n        campaign.userId in users\n          ? users[campaign.userId]\n          : formatMessage({ id: 'users.unknownUser' }),\n      isActive:\n        currentDate >= new Date(campaign.startDate)\n        && currentDate <= new Date(campaign.endDate),\n    }));\n  }\n\n  constructColumns() {\n    const {\n      intl: { formatMessage },\n      campaigns,\n    } = this.props;\n    const { startDate } = this.state;\n\n    return [\n      {\n        Header: formatMessage({ id: 'column.name' }),\n        accessor: 'name',\n        filterMethod: (filter, rows) => matchSorter(rows, filter.value, { keys: ['name'] }),\n        filterAll: true,\n      },\n      {\n        Header: formatMessage({ id: 'column.userName' }),\n        accessor: 'userName',\n        filterable: false,\n      },\n      {\n        Header: formatMessage({ id: 'column.startDate' }),\n        accessor: 'startDate',\n        Filter: ({ filter, onChange }) => (\n          <DatePicker\n            startDate={filter ? filter.value : undefined}\n            disabled={campaigns.length === 0}\n            setDate={(value) => this.selectStartDate(onChange, value)}\n            placeholder={formatMessage({ id: 'column.startDate' })}\n          />\n        ),\n        // eslint-disable-next-line max-len\n        filterMethod: (filter, row) => !filter || !filter.value || new Date(row.startDate) >= filter.value,\n      },\n      {\n        Header: formatMessage({ id: 'column.endDate' }),\n        accessor: 'endDate',\n        Filter: ({ filter, onChange }) => (\n          <DatePicker\n            startDate={filter ? filter.value : undefined}\n            setDate={onChange}\n            minDate={startDate}\n            disabled={startDate === null}\n            placeholder={formatMessage({\n              id:\n                startDate === null\n                  ? 'endDate.disabled.placeholder'\n                  : 'column.endDate',\n            })}\n          />\n        ),\n        // eslint-disable-next-line max-len\n        filterMethod: (filter, row) => !filter || !filter.value || new Date(row.endDate) <= filter.value,\n      },\n      {\n        Header: formatMessage({ id: 'column.isActive' }),\n        accessor: 'isActive',\n        filterable: false,\n        Cell: (row) => Flag({\n          isActive: row.value,\n          labelTrue: 'isActive.value.yes',\n          labelFalse: 'isActive.value.no',\n        }),\n      },\n      {\n        Header: formatMessage({ id: 'column.budget' }),\n        accessor: 'budget',\n        filterable: false,\n        Cell: (row) => numeral(row.value).format('($ 0.00 a)'),\n      },\n    ];\n  }\n\n  selectStartDate(onChange, startDate) {\n    this.setState({ startDate }, () => onChange(startDate));\n  }\n\n  render() {\n    const {\n      isLoading,\n      isError,\n      intl: { formatMessage },\n      campaigns,\n    } = this.props;\n    const data = this.mapCampaigns();\n    const columns = this.constructColumns();\n    const loadingText = formatMessage({\n      id: isError ? 'users.fetchError' : 'users.loading',\n    });\n    const noDataText = formatMessage({\n      id:\n        campaigns.length === 0\n          ? 'campaigns.noData'\n          : 'campaigns.noFilteredData',\n    });\n\n    return (\n      <Table\n        columns={columns}\n        data={data}\n        isLoading={isLoading}\n        isError={isError}\n        loadingText={loadingText}\n        noDataText={noDataText}\n      />\n    );\n  }\n}\n\nCampaignsList.propTypes = {\n  campaigns: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\n      name: PropTypes.string.isRequired,\n      startDate: PropTypes.string.isRequired,\n      endDate: PropTypes.string.isRequired,\n      budget: PropTypes.number.isRequired,\n      userId: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    }),\n  ).isRequired,\n  fetchUsers: PropTypes.func.isRequired,\n  loadCampaigns: PropTypes.func.isRequired,\n  // eslint-disable-next-line react/forbid-prop-types\n  users: PropTypes.object.isRequired,\n  isLoading: PropTypes.bool.isRequired,\n  isError: PropTypes.bool.isRequired,\n  intl: PropTypes.shape(IntlProvider.propTypes).isRequired,\n};\n\nexport default CampaignsList;\n","const api = {\n  get: async (url) => {\n    const response = await fetch(url);\n    return response.json();\n  },\n};\n\nexport default api;\n","import api from '../../utils/apiService';\n\nconst USERS_URL = 'https://jsonplaceholder.typicode.com/users';\n\nconst usersApi = {\n  fetchUsers: () => api.get(USERS_URL),\n};\n\nexport default usersApi;\n","import {\n  USERS_FETCH,\n  USERS_FETCH_ERROR,\n  USERS_FETCH_SUCCESS,\n} from './usersModel';\nimport api from './usersApi';\n\nconst fetchUsersStart = () => ({\n  type: USERS_FETCH,\n});\n\nconst fetchUsersSuccess = (users) => ({\n  type: USERS_FETCH_SUCCESS,\n  payload: users,\n});\n\nconst fetchUsersError = () => ({\n  type: USERS_FETCH_ERROR,\n});\n\n// eslint-disable-next-line import/prefer-default-export\nexport const fetchUsers = () => async (dispatch) => {\n  dispatch(fetchUsersStart());\n  try {\n    const users = await api.fetchUsers();\n    const usersMap = users.reduce(\n      (result, { id, name }) => ({\n        ...result,\n        [id]: name,\n      }),\n      {},\n    );\n    dispatch(fetchUsersSuccess(usersMap));\n  } catch (e) {\n    dispatch(fetchUsersError());\n  }\n};\n","export const USERS_FETCH = '@users/FETCH';\nexport const USERS_FETCH_SUCCESS = '@users/FETCH_SUCCESS';\nexport const USERS_FETCH_ERROR = '@users/FETCH_ERROR';\n","import {\n  object, number, string, date,\n} from 'yup';\n\nexport const CAMPAIGNS_SET = '@campaigns/SET';\n\nexport const campaignsSchema = object({\n  id: number().required(),\n  name: string().required(),\n  startDate: date().required(),\n  endDate: date().required(),\n  budget: number().required(),\n  userId: number().required(),\n});\n","import { campaignsSchema, CAMPAIGNS_SET } from './campaignsModel';\n\nconst setCampaigns = (campaigns) => ({\n  type: CAMPAIGNS_SET,\n  payload: campaigns,\n});\n\n// eslint-disable-next-line import/prefer-default-export\nexport const loadCampaigns = (campaigns) => async (dispatch) => {\n  try {\n    const validationPromises = campaigns.map((campaign) => campaignsSchema.validate(campaign));\n    await Promise.all(validationPromises);\n    dispatch(setCampaigns(campaigns));\n  } catch (e) {\n    /* eslint-disable no-console */\n    console.error(e.message);\n    if (e.value) {\n      // eslint-disable-next-line no-console\n      console.error('Campaign that failed validation: ', e.value);\n    } else {\n      console.error('Please provide a valid array of campaigns');\n      /* eslint-enable */\n    }\n  }\n};\n","import { connect } from 'react-redux';\nimport { injectIntl } from 'react-intl';\nimport CampaignsList from './CampaignsList';\nimport { fetchUsers } from '../../state/users/usersActions';\nimport { loadCampaigns } from '../../state/campaigns/campaignsActions';\n\nconst mapStateToProps = (state) => ({\n  campaigns: state.campaigns.campaigns,\n  ...state.users,\n});\n\nconst mapDispatchToProps = {\n  fetchUsers,\n  loadCampaigns,\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(injectIntl(CampaignsList));\n","import React from 'react';\nimport classnames from 'classnames';\nimport { IntlProvider } from 'react-intl';\nimport styles from './app.scss';\nimport DEFAULT_TRANSLATIONS from '../../lang/en.json';\nimport CampaignsList from '../CampaignsList';\n\nconst cx = classnames.bind(styles);\n\nfunction App() {\n  const { translations } = DEFAULT_TRANSLATIONS;\n\n  return (\n    <IntlProvider locale=\"en\" messages={translations}>\n      <div className={cx('app')}>\n        <CampaignsList />\n      </div>\n    </IntlProvider>\n  );\n}\n\nexport default App;\n","/* eslint-disable no-console, no-param-reassign */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost'\n    // [::1] is the IPv6 localhost address.\n    || window.location.hostname === '[::1]'\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    || window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service '\n              + 'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all '\n                  + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404\n        || (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import { CAMPAIGNS_SET } from './campaignsModel';\n\nconst initialState = {\n  campaigns: [],\n};\n\nconst campaignsReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case CAMPAIGNS_SET: {\n      return {\n        campaigns: [...state.campaigns, ...action.payload],\n      };\n    }\n    default:\n      return state;\n  }\n};\n\nexport default campaignsReducer;\n","import {\n  USERS_FETCH,\n  USERS_FETCH_ERROR,\n  USERS_FETCH_SUCCESS,\n} from './usersModel';\n\nconst initialState = {\n  users: {},\n  isLoading: false,\n  isError: false,\n};\n\nconst usersReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case USERS_FETCH:\n      return {\n        ...initialState,\n        isLoading: true,\n      };\n    case USERS_FETCH_SUCCESS:\n      return {\n        ...initialState,\n        users: action.payload,\n      };\n    case USERS_FETCH_ERROR:\n      return {\n        ...initialState,\n        isError: true,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default usersReducer;\n","import { combineReducers } from 'redux';\nimport campaigns from './campaigns/campaignsReducer';\nimport users from './users/usersReducer';\n\nconst rootReducer = combineReducers({\n  campaigns,\n  users,\n});\n\nexport default rootReducer;\n","import thunk from 'redux-thunk';\nimport { createStore, applyMiddleware } from 'redux';\nimport reducers from './reducers';\n\nconst store = createStore(reducers, applyMiddleware(thunk));\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport { Provider } from 'react-redux';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './state/store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}