{"version":3,"sources":["components/Table/Table.jsx","containers/CampaignsList/CampaignsList.jsx","utils/apiService.js","state/users/usersApi.js","state/users/usersActions.js","state/users/usersModel.js","containers/CampaignsList/index.js","state/campaigns/campaignsActions.js","state/campaigns/campaignsModel.js","containers/App/App.jsx","serviceWorker.js","state/campaigns/campaignsReducer.js","state/users/usersReducer.js","state/reducers.js","state/store.js","index.jsx"],"names":["Table","columns","data","filterable","CampaignsList","props","addCampaigns","bind","mapCampaigns","constructColumns","fetchUsers","this","window","AddCampaigns","campaigns","loadCampaigns","users","formatMessage","intl","currentDate","Date","now","yesNoLabels","id","map","campaign","userName","userId","isActive","startDate","endDate","Header","accessor","filterMethod","filter","rows","matchSorter","value","keys","filterAll","Component","api","get","url","a","fetch","response","json","usersApi","fetchUsersSuccess","type","payload","mapDispatchToProps","dispatch","usersMap","reduce","result","name","setCampaigns","connect","state","injectIntl","cx","classnames","styles","App","translations","DEFAULT_TRANSLATIONS","locale","messages","className","Boolean","location","hostname","match","initialState","campaignsReducer","action","isLoading","isError","usersReducer","rootReducer","combineReducers","store","createStore","reducers","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6443a78b.chunk.js","sourcesContent":["import React from 'react';\nimport ReactTable from 'react-table';\nimport PropTypes from 'prop-types';\nimport 'react-table/react-table.css';\n\nconst Table = ({ columns, data }) => (\n  <ReactTable data={data} columns={columns} filterable />\n);\n\nTable.propTypes = {\n  // eslint-disable-next-line react/forbid-prop-types\n  columns: PropTypes.array.isRequired,\n  // eslint-disable-next-line react/forbid-prop-types\n  data: PropTypes.array.isRequired,\n};\n\nexport default Table;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { IntlProvider } from 'react-intl';\nimport matchSorter from 'match-sorter';\nimport Table from '../../components/Table';\n\nclass CampaignsList extends Component {\n  constructor(props) {\n    super(props);\n\n    this.addCampaigns = this.addCampaigns.bind(this);\n    this.mapCampaigns = this.mapCampaigns.bind(this);\n    this.constructColumns = this.constructColumns.bind(this);\n  }\n\n  componentDidMount() {\n    const { fetchUsers } = this.props;\n    fetchUsers();\n\n    window.AddCampaigns = this.addCampaigns;\n  }\n\n  componentWillUnmount() {\n    window.AddCampaigns = null;\n  }\n\n  addCampaigns(campaigns) {\n    const { loadCampaigns } = this.props;\n    loadCampaigns(campaigns);\n  }\n\n  mapCampaigns() {\n    const {\n      campaigns,\n      users,\n      intl: { formatMessage },\n    } = this.props;\n    const currentDate = Date.now();\n    const yesNoLabels = [\n      formatMessage({ id: 'isActive.value.yes' }),\n      formatMessage({ id: 'isActive.value.no' }),\n    ];\n\n    return campaigns.map((campaign) => ({\n      ...campaign,\n      userName:\n        campaign.userId in users ? users[campaign.userId] : 'Unknown user',\n      isActive:\n        currentDate >= new Date(campaign.startDate)\n        && currentDate <= new Date(campaign.endDate)\n          ? yesNoLabels[0]\n          : yesNoLabels[1],\n    }));\n  }\n\n  constructColumns() {\n    const {\n      intl: { formatMessage },\n    } = this.props;\n\n    return [\n      {\n        Header: formatMessage({ id: 'column.name' }),\n        accessor: 'name',\n        filterMethod: (filter, rows) => matchSorter(rows, filter.value, { keys: ['name'] }),\n        filterAll: true,\n      },\n      {\n        Header: formatMessage({ id: 'column.userName' }),\n        accessor: 'userName',\n        filterable: false,\n      },\n      {\n        Header: formatMessage({ id: 'column.startDate' }),\n        accessor: 'startDate',\n      },\n      {\n        Header: formatMessage({ id: 'column.endDate' }),\n        accessor: 'endDate',\n      },\n      {\n        Header: formatMessage({ id: 'column.isActive' }),\n        accessor: 'isActive',\n        filterable: false,\n      },\n      {\n        Header: formatMessage({ id: 'column.budget' }),\n        accessor: 'budget',\n        filterable: false,\n      },\n    ];\n  }\n\n  render() {\n    const campaigns = this.mapCampaigns();\n    const columns = this.constructColumns();\n\n    return <Table columns={columns} data={campaigns} />;\n  }\n}\n\nCampaignsList.propTypes = {\n  campaigns: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\n      name: PropTypes.string.isRequired,\n      startDate: PropTypes.string.isRequired,\n      endDate: PropTypes.string.isRequired,\n      budget: PropTypes.number.isRequired,\n      userId: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    }),\n  ).isRequired,\n  fetchUsers: PropTypes.func.isRequired,\n  loadCampaigns: PropTypes.func.isRequired,\n  // eslint-disable-next-line react/forbid-prop-types\n  users: PropTypes.object.isRequired,\n  intl: PropTypes.shape(IntlProvider.propTypes).isRequired,\n};\n\nexport default CampaignsList;\n","const api = {\n  get: async (url) => {\n    const response = await fetch(url);\n    return response.json();\n  },\n};\n\nexport default api;\n","import api from '../../utils/apiService';\n\nconst USERS_URL = 'https://jsonplaceholder.typicode.com/users';\n\nconst usersApi = {\n  fetchUsers: () => api.get(USERS_URL),\n};\n\nexport default usersApi;\n","import {\n  USERS_FETCH,\n  USERS_FETCH_ERROR,\n  USERS_FETCH_SUCCESS,\n} from './usersModel';\nimport api from './usersApi';\n\nconst fetchUsersStart = () => ({\n  type: USERS_FETCH,\n});\n\nconst fetchUsersSuccess = (users) => ({\n  type: USERS_FETCH_SUCCESS,\n  payload: users,\n});\n\nconst fetchUsersError = () => ({\n  type: USERS_FETCH_ERROR,\n});\n\n// eslint-disable-next-line import/prefer-default-export\nexport const fetchUsers = () => async (dispatch) => {\n  dispatch(fetchUsersStart());\n  try {\n    const users = await api.fetchUsers();\n    const usersMap = users.reduce(\n      (result, { id, name }) => ({\n        ...result,\n        [id]: name,\n      }),\n      {},\n    );\n    dispatch(fetchUsersSuccess(usersMap));\n  } catch (e) {\n    dispatch(fetchUsersError());\n  }\n};\n","export const USERS_FETCH = '@users/FETCH';\nexport const USERS_FETCH_SUCCESS = '@users/FETCH_SUCCESS';\nexport const USERS_FETCH_ERROR = '@users/FETCH_ERROR';\n","import { connect } from 'react-redux';\nimport { injectIntl } from 'react-intl';\nimport CampaignsList from './CampaignsList';\nimport { fetchUsers } from '../../state/users/usersActions';\nimport { loadCampaigns } from '../../state/campaigns/campaignsActions';\n\nconst mapStateToProps = (state) => ({\n  campaigns: state.campaigns.campaigns,\n  users: state.users.users,\n});\n\nconst mapDispatchToProps = {\n  fetchUsers,\n  loadCampaigns,\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(injectIntl(CampaignsList));\n","import { CAMPAIGNS_SET } from './campaignsModel';\n\nconst setCampaigns = (campaigns) => ({\n  type: CAMPAIGNS_SET,\n  payload: campaigns,\n});\n\n// eslint-disable-next-line import/prefer-default-export\nexport const loadCampaigns = (campaigns) => (dispatch) => {\n  // TODO: validate campaigns\n  dispatch(setCampaigns(campaigns));\n};\n","// eslint-disable-next-line import/prefer-default-export\nexport const CAMPAIGNS_SET = '@campaigns/SET';\n","import React from 'react';\nimport classnames from 'classnames';\nimport { IntlProvider } from 'react-intl';\nimport styles from './app.scss';\nimport DEFAULT_TRANSLATIONS from '../../lang/en.json';\nimport CampaignsList from '../CampaignsList';\n\nconst cx = classnames.bind(styles);\n\nfunction App() {\n  const { translations } = DEFAULT_TRANSLATIONS;\n\n  return (\n    <IntlProvider locale=\"en\" messages={translations}>\n      <div className={cx('app')}>\n        <CampaignsList />\n      </div>\n    </IntlProvider>\n  );\n}\n\nexport default App;\n","/* eslint-disable no-console, no-param-reassign */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost'\n    // [::1] is the IPv6 localhost address.\n    || window.location.hostname === '[::1]'\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    || window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service '\n              + 'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all '\n                  + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404\n        || (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import { CAMPAIGNS_SET } from './campaignsModel';\n\nconst initialState = {\n  campaigns: [],\n};\n\nconst campaignsReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case CAMPAIGNS_SET: {\n      return {\n        campaigns: [...state.campaigns, ...action.payload],\n      };\n    }\n    default:\n      return state;\n  }\n};\n\nexport default campaignsReducer;\n","import {\n  USERS_FETCH,\n  USERS_FETCH_ERROR,\n  USERS_FETCH_SUCCESS,\n} from './usersModel';\n\nconst initialState = {\n  users: {},\n  isLoading: false,\n  isError: false,\n};\n\nconst usersReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case USERS_FETCH:\n      return {\n        users: {},\n        isLoading: true,\n        isError: false,\n      };\n    case USERS_FETCH_SUCCESS:\n      return {\n        users: action.payload,\n        isLoading: false,\n      };\n    case USERS_FETCH_ERROR:\n      return {\n        users: {},\n        isLoading: false,\n        isError: true,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default usersReducer;\n","import { combineReducers } from 'redux';\nimport campaigns from './campaigns/campaignsReducer';\nimport users from './users/usersReducer';\n\nconst rootReducer = combineReducers({\n  campaigns,\n  users,\n});\n\nexport default rootReducer;\n","import thunk from 'redux-thunk';\nimport { createStore, applyMiddleware } from 'redux';\nimport reducers from './reducers';\n\nconst store = createStore(reducers, applyMiddleware(thunk));\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport { Provider } from 'react-redux';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './state/store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}