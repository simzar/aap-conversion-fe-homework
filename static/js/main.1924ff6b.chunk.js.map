{"version":3,"sources":["components/Table/data.js","components/Table/Table.jsx","components/Table/index.js","containers/App/App.js","serviceWorker.js","index.js"],"names":["campaigns","id","name","startDate","endDate","Budget","userId","columns","Table","intl","translatedColumns","map","Header","formatMessage","accessor","split","pop","data","injectIntl","cx","classnames","bind","styles","App","translations","DEFAULT_TRANSLATIONS","locale","messages","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"siBAmFeA,G,MAnFG,CAChB,CACEC,GAAI,EACJC,KAAM,SACNC,UAAW,YACXC,QAAS,WACTC,OAAQ,MACRC,OAAQ,GAEV,CACEL,GAAI,EACJC,KAAM,UACNC,UAAW,aACXC,QAAS,YACTC,OAAQ,OACRC,OAAQ,GAEV,CACEL,GAAI,EACJC,KAAM,QACNC,UAAW,YACXC,QAAS,YACTC,OAAQ,OACRC,OAAQ,GAEV,CACEL,GAAI,EACJC,KAAM,UACNC,UAAW,YACXC,QAAS,aACTC,OAAQ,OACRC,OAAQ,GAEV,CACEL,GAAI,EACJC,KAAM,OACNC,UAAW,aACXC,QAAS,YACTC,OAAQ,OACRC,OAAQ,GAEV,CACEL,GAAI,EACJC,KAAM,WACNC,UAAW,YACXC,QAAS,YACTC,OAAQ,OACRC,OAAQ,GAEV,CACEL,GAAI,EACJC,KAAM,UACNC,UAAW,YACXC,QAAS,YACTC,OAAQ,OACRC,OAAQ,GAEV,CACEL,GAAI,EACJC,KAAM,SACNC,UAAW,aACXC,QAAS,YACTC,OAAQ,OACRC,OAAQ,GAEV,CACEL,GAAI,EACJC,KAAM,WACNC,UAAW,WACXC,QAAS,aACTC,OAAQ,OACRC,OAAQ,GAEV,CACEL,GAAI,GACJC,KAAM,aACNC,UAAW,WACXC,QAAS,YACTC,OAAQ,OACRC,OAAQ,KCxENC,EAAU,CACd,cACA,mBACA,iBACA,gBACA,iBAgBaC,EAbD,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACTC,EAAoBH,EAAQI,KAAI,SAACV,GAAD,MAAS,CAC7CW,OAAQH,EAAKI,cAAc,CAAEZ,OAC7Ba,SAAUb,EAAGc,MAAM,KAAKC,UAG1B,OAAO,kBAAC,IAAD,CAAYC,KAAMjB,EAAWO,QAASG,KClBhCQ,cAAWV,GCIpBW,EAAKC,IAAWC,KAAKC,KAcZC,MAZf,WAAgB,IACNC,EAAiBC,EAAjBD,aAER,OACE,kBAAC,IAAD,CAAcE,OAAO,KAAKC,SAAUH,GAClC,yBAAKI,UAAWT,EAAG,QACjB,kBAAC,EAAD,SCFYU,QACW,cAA7BC,OAAOC,SAASC,UAEkB,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAC1B,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAACC,GAClCA,EAAaC,kB","file":"static/js/main.1924ff6b.chunk.js","sourcesContent":["const campaigns = [\n  {\n    id: 1,\n    name: 'Divavu',\n    startDate: '9/19/2017',\n    endDate: '3/9/2018',\n    Budget: 88377,\n    userId: 3,\n  },\n  {\n    id: 2,\n    name: 'Jaxspan',\n    startDate: '11/21/2017',\n    endDate: '2/21/2018',\n    Budget: 608715,\n    userId: 6,\n  },\n  {\n    id: 3,\n    name: 'Miboo',\n    startDate: '11/1/2017',\n    endDate: '6/20/2017',\n    Budget: 239507,\n    userId: 7,\n  },\n  {\n    id: 4,\n    name: 'Trilith',\n    startDate: '8/25/2017',\n    endDate: '11/30/2017',\n    Budget: 179838,\n    userId: 1,\n  },\n  {\n    id: 5,\n    name: 'Layo',\n    startDate: '11/28/2017',\n    endDate: '3/10/2018',\n    Budget: 837850,\n    userId: 9,\n  },\n  {\n    id: 6,\n    name: 'Photojam',\n    startDate: '7/25/2017',\n    endDate: '6/23/2017',\n    Budget: 858131,\n    userId: 3,\n  },\n  {\n    id: 7,\n    name: 'Blogtag',\n    startDate: '6/27/2017',\n    endDate: '1/15/2018',\n    Budget: 109078,\n    userId: 2,\n  },\n  {\n    id: 8,\n    name: 'Rhyzio',\n    startDate: '10/13/2017',\n    endDate: '1/25/2018',\n    Budget: 272552,\n    userId: 4,\n  },\n  {\n    id: 9,\n    name: 'Zoomcast',\n    startDate: '9/6/2017',\n    endDate: '11/10/2017',\n    Budget: 301919,\n    userId: 8,\n  },\n  {\n    id: 10,\n    name: 'Realbridge',\n    startDate: '3/5/2018',\n    endDate: '10/2/2017',\n    Budget: 505602,\n    userId: 5,\n  },\n];\n\nexport default campaigns;\n","import React from 'react';\nimport ReactTable from 'react-table';\nimport PropTypes from 'prop-types';\nimport { IntlProvider } from 'react-intl';\nimport 'react-table/react-table.css';\nimport campaigns from './data';\n\nconst columns = [\n  'column.name',\n  'column.startDate',\n  'column.endDate',\n  'column.Budget',\n  'column.userId',\n];\n\nconst Table = ({ intl }) => {\n  const translatedColumns = columns.map((id) => ({\n    Header: intl.formatMessage({ id }),\n    accessor: id.split('.').pop(),\n  }));\n\n  return <ReactTable data={campaigns} columns={translatedColumns} />;\n};\n\nTable.propTypes = {\n  intl: PropTypes.shape(IntlProvider.propTypes).isRequired,\n};\n\nexport default Table;\n","import { injectIntl } from 'react-intl';\nimport Table from './Table';\n\nexport default injectIntl(Table);\n","import React from 'react';\nimport classnames from 'classnames';\nimport { IntlProvider } from 'react-intl';\nimport styles from './app.scss';\nimport DEFAULT_TRANSLATIONS from '../../lang/en.json';\nimport Table from '../../components/Table';\n\nconst cx = classnames.bind(styles);\n\nfunction App() {\n  const { translations } = DEFAULT_TRANSLATIONS;\n\n  return (\n    <IntlProvider locale=\"en\" messages={translations}>\n      <div className={cx('app')}>\n        <Table />\n      </div>\n    </IntlProvider>\n  );\n}\n\nexport default App;\n","/* eslint-disable no-console, no-param-reassign */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost'\n    // [::1] is the IPv6 localhost address.\n    || window.location.hostname === '[::1]'\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    || window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service '\n              + 'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all '\n                  + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404\n        || (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}